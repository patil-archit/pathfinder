# Generated by Django 5.2.6 on 2025-09-15 19:31

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssessmentSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('session_type', models.CharField(choices=[('ai_powered', 'AI Powered Assessment'), ('standard', 'Standard Assessment'), ('quick', 'Quick Assessment')], default='ai_powered', max_length=20)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='in_progress', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_questions', models.IntegerField(default=0)),
                ('questions_answered', models.IntegerField(default=0)),
                ('recommendations', models.JSONField(blank=True, default=list)),
                ('ai_confidence_score', models.FloatField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessment_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('top_career_matches', models.JSONField(default=list)),
                ('skill_gaps', models.JSONField(default=list)),
                ('recommended_skills', models.JSONField(default=list)),
                ('work_style_preference', models.CharField(blank=True, max_length=100, null=True)),
                ('team_preference', models.CharField(blank=True, max_length=100, null=True)),
                ('leadership_style', models.CharField(blank=True, max_length=100, null=True)),
                ('motivation_factors', models.JSONField(default=list)),
                ('technical_affinity', models.FloatField(blank=True, null=True)),
                ('creative_affinity', models.FloatField(blank=True, null=True)),
                ('analytical_affinity', models.FloatField(blank=True, null=True)),
                ('interpersonal_affinity', models.FloatField(blank=True, null=True)),
                ('ai_analysis', models.TextField(blank=True, null=True)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='assessments.assessmentsession')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_number', models.IntegerField()),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('text', 'Text Input'), ('rating', 'Rating Scale'), ('scenario', 'Scenario Based')], default='multiple_choice', max_length=20)),
                ('options', models.JSONField(blank=True, default=list)),
                ('user_answer', models.TextField(blank=True, null=True)),
                ('answer_metadata', models.JSONField(blank=True, default=dict)),
                ('presented_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('response_time_seconds', models.IntegerField(blank=True, null=True)),
                ('ai_generated', models.BooleanField(default=False)),
                ('ai_context', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessments.assessmentsession')),
            ],
            options={
                'ordering': ['session', 'question_number'],
            },
        ),
        migrations.CreateModel(
            name='AssessmentFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('accuracy_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('usefulness_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('feedback_text', models.TextField(blank=True, null=True)),
                ('would_recommend', models.BooleanField(blank=True, null=True)),
                ('questions_relevant', models.BooleanField(blank=True, null=True)),
                ('recommendations_helpful', models.BooleanField(blank=True, null=True)),
                ('assessment_too_long', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='assessments.assessmentsession')),
            ],
        ),
        migrations.CreateModel(
            name='CareerRecommendationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('career_title', models.CharField(max_length=200)),
                ('match_percentage', models.IntegerField()),
                ('description', models.TextField()),
                ('required_skills', models.JSONField(default=list)),
                ('salary_range', models.CharField(blank=True, max_length=100, null=True)),
                ('growth_potential', models.CharField(blank=True, max_length=100, null=True)),
                ('viewed', models.BooleanField(default=False)),
                ('clicked_roadmap', models.BooleanField(default=False)),
                ('saved_by_user', models.BooleanField(default=False)),
                ('user_rating', models.IntegerField(blank=True, null=True)),
                ('user_notes', models.TextField(blank=True, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('experience_level', models.CharField(blank=True, max_length=50, null=True)),
                ('education_requirements', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_recommendations', to='assessments.assessmentsession')),
            ],
            options={
                'ordering': ['-match_percentage', 'career_title'],
            },
        ),
        migrations.AddIndex(
            model_name='assessmentsession',
            index=models.Index(fields=['user', '-created_at'], name='assessments_user_id_1028ea_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentsession',
            index=models.Index(fields=['session_id'], name='assessments_session_98af9d_idx'),
        ),
        migrations.AddIndex(
            model_name='assessmentsession',
            index=models.Index(fields=['status'], name='assessments_status_581364_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assessmentquestion',
            unique_together={('session', 'question_number')},
        ),
    ]
